/*
 * vecAdd.cu
 *
 *  Created on: Jul 31, 2015
 *      Author: lsa
 */

#define N 512

__global__ void vecAdd(int *a, int *b, int *c){
	int i = blockIdx.x;
	*c = a[i] + b[i];
}

int main(){
	int *a, *b;					//Host side arrays
	int *c;		//Result variable
	int *d_a, *d_b, *d_c;		//Device side arrays
	int size = N*sizeof(int);	//Size of N integers

	//Allocate device copies of a, b and c
	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, size);

	//Allocate host side arrays
	a = (int*)malloc(size);
	b = (int*)malloc(size);

	//Assign values to the variables
	int i;
	for(i = 0; i<N; i++){
		a[i] = 1;
		b[i] = 1;
	}

	//Copy inputs to device
	cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);

	//Launch kernel
	vecAdd<<<N,1>>>(d_a, d_b, d_c);

	//Copy result back to host
	cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);

	//Cleanup
	cudaFree(d_a); cudaFree(d_b); cudaFree(d_c);

	//Print
	printf("\nGPU result: %d", c);

	//Calculate the same thing on CPU
	for(i = 0; i<N; i++){
		*c = a[i] + b[i];
	}

	//Print again
	printf("\nCPU result: %d", c);

	return 0;
}
